new Vue({
    el: '#admin',
    data: {
        id: '',
        isOpen: true,
        expand: false,
        loading: true,
        newCart: null,
        send: false,
        сheckout: [],
        card: [],
        count: 0,
        summa: 0,
        show: null,
        vin: '',
        spares: '',
        error: {
            vin: false,
            spares: false
        }
    },
    computed: {
        totalSum: function () {
            var sum = this.card.reduce(
                (acc, current) => acc + Number(current.price), 0
            );
            this.summa = (parseInt(sum * 100)) / 100;           
        },
        isValid () {
            return this.vin && this.spares
        }
    },
    mounted() {
        this.card = JSON.parse(localStorage.getItem('cart')) || [];
        if (localStorage.getItem('cart')) {
            try {
                setTimeout(function () {
                    this.loading = false;
                }.bind(this), 500);
                var goods = JSON.parse(localStorage.getItem('cart'));
                var set = new Set(goods.map(JSON.stringify));
                var uniqArray = Array.from(set).map(JSON.parse);
                this.card = uniqArray;
            } catch(e) {
                localStorage.removeItem('cart');
                console.log('Error:', e)
            }
        }
    },
    methods: {
        priceFormat: function(digital) {
            const num = parseInt(digital).toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ")
            const cent = digital.toString().split('.')[1];
            return num+'.'+cent+' ₽'
        },
        getStartLink(url) {
            window.location.assign(url);
        },
        countGoods(n,s1,s2,s3, b = false) {
            let m = n % 10; j = n % 100;
            if(b) {n = n;}
            if(m==0 || m>=5 || (j>=10 && j<=20)) {return s3;}
            if(m>=2 && m<=4) {return s2;}
            return s1;
        },
        toggleSubMenu() {
            if(!this.isOpen) {
                this.isOpen = !this.isOpen;
            }
        },
        toggleMenu() {
            this.isOpen = !this.isOpen;
        },
        toggleExpandLess() {
            this.expand = !this.expand;
        },
        addToCard(e) {
            var added = JSON.parse(localStorage.getItem('cart'));
            var arr = added ? added : [added];
            const el = document.querySelector('#card'+e);
            //var valu = e.target.dataset.card;
            const {...card} = el.dataset.card.split(',');
            const add = {
                id: card[0],
                article: card[1],
                name: card[2],
                count: card[3],
                price: card[4]
            }
            console.log('to card: ', add);
            var total = arr.filter(el => el != null).concat(add);
            toastr.success(`Товар "${card[2]}" добавлен в корзину`, "Успешно", {
                positionClass:"toast-bottom-left",
                containerId:"toast-bottom-left"
            });
            localStorage.setItem('cart', JSON.stringify(total));
            this.card.push(add);
            this.saveCart();
        },
        addCat() {
            if (!this.newCart) {
                return;
            };
            this.card.push(this.newCart);
            this.newCart = '';
            this.saveCart();
        },
        removeCart(x) {
            this.card.splice(x, 1);
            this.saveCart();
        },
        saveCart() {
            const parsed = JSON.stringify(this.card);
            localStorage.setItem('cart', parsed);
        },
        async Checkout(x) {
            toastr.success('Ваш заказ получен.', 'Успешно', {
                positionClass:"toast-bottom-left",
                containerId:"toast-bottom-left"
            });

            const roots = Object.values(this.card).map((value) => ({
                quantity: Number(value.count),
                price: Number(value.price.replace(/[\s.]/g, '')),
                discount: 0,
                vat: 20,
                assortment: {
                    meta: {
                        href: `https://online.moysklad.ru/api/remap/1.2/entity/product/${value.id}`,
                        type: "product",
                        mediaType: "application/json"
                    }
                },
                reserve: 0
            }));

            var cart = {
                organization: {
                    meta: {
                        href: 'https://online.moysklad.ru/api/remap/1.2/entity/organization/218c26ab-33fe-11ed-0a80-0285001db7b3',
                        type: 'organization',
                        mediaType: 'application/json'
                    }
                },
                agent: {
                    meta: {
                        href: `https://online.moysklad.ru/api/remap/1.2/entity/counterparty/${x}`,
                        type: 'counterparty',
                        mediaType: 'application/json'
                    }
                },
            };
            var positions = {
                positions: roots
            };

            this.сheckout = Object.assign({}, cart, positions);

            var raw = JSON.stringify(this.сheckout);
            
            var requestOptions = {
                method: 'POST',
                body: raw,
                redirect: 'manual'
            };           
            await fetch('/api/сheckout', requestOptions)
                .finally(() => this.loading = false);

            var headers = new Headers();
            headers.append('Authorization', 'Basic YWRtaW5AcHJvc3Bla3QtdHJhbnM6MGYxMDhlM2M1NA==');
            headers.append('Content-Type', 'application/json');

            var Options = {
                method: 'POST',
                mode: 'no-cors',
                headers,
                body: raw,
                redirect: 'follow'
            };
            
            const response = await fetch('https://online.moysklad.ru/api/remap/1.2/entity/customerorder', Options)
                .then(response => response.text())
                .then(result => console.log(result))
                .catch(error => console.log('error', error));
            const result = await response.json()
            //console.log('Account:', x);
            console.log('Success:', result);
            return result;
        },
        Send () {
            if (this.isValid) {
                setTimeout(function () {
                    this.loading = true
                }.bind(this), 2000);
            }
            if(!this.vin) {
                this.error.vin = true
            }
            if(!this.spares) {
                this.error.spares = true
            }
        },
        async Save()
        {
            if (!this.isValid) return false;

            this.loading = true;

            var formdata = new FormData();
            var ModalEl = document.getElementById('vinModal');
            var modal = bootstrap.Modal.getInstance(ModalEl)

            formdata.append("vin", this.vin);
            formdata.append("spares", this.spares);
            //var raw = JSON.parse(JSON.stringify(formdata));
            
            setTimeout(function () {
                modal.hide();
                toastr.success(`Ваша заявка принята.`, "Успешно", {
                    positionClass:"toast-bottom-left",
                    containerId:"toast-bottom-left"
                });
            }.bind(this), 1000);
            this.send = true


            var requestOptions = {
                method: 'POST',
                body: formdata,
                redirect: 'follow'
            };

            const response = await fetch('/api/spares', requestOptions)
                .finally(() => this.loading = false);
            const result = await response.text();
            return result;
        }
    }
});

$(function(){
	$('#inner-content').slimScroll({
		height: '570px',
        size: '3px',
        alwaysVisible: false
	});
});