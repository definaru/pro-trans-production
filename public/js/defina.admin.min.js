new Vue({
    el: '#admin',
    data: {
        id: '',
        isOpen: true,
        expand: false,
        loading: true,
        newCart: null,
        close: false,
        send: false,
        сheckout: [],
        preсheckout: [],
        card: [],
        preorder: [],
        count: 0,
        totalsumma: 0,
        show: null,
        vin: '',
        spares: '',
        message: '',
        address: '',
        view_password: false,
        amount: 0,
        preamount: 0,
        error: {
            message: false,
            vin: false,
            spares: false
        }
    },
    computed: {
        totalSum: function () {
            var sum = this.card.reduce(
                (acc, current) => acc + Number(current.summa), 0
            );
            this.totalsumma = sum
            //(parseInt(sum * 100)) / 100;           
        },
        totalAmount: function () {
            var value = this.card.reduce(
                (acc, current) => acc + Number(current.count), 0
            );
            this.amount = value;
        },
        totalPreAmount: function () {
            var value = this.preorder.reduce(
                (acc, current) => acc + Number(current.count), 0
            );
            this.preamount = value;
        },
        isValid () {
            return this.vin && this.spares
        },
        isValidMessage () {
            return this.message
        }
    },
    mounted() {
        this.card = JSON.parse(localStorage.getItem('cart')) || [];
        this.preorder = JSON.parse(localStorage.getItem('preorder')) || [];

        this.address = localStorage.getItem('address') || '';
        if (localStorage.getItem('cart')) {
            try {
                setTimeout(function () {
                    this.loading = false;
                }.bind(this), 500);
                var goods = JSON.parse(localStorage.getItem('cart'));
                var set = new Set(goods.map(JSON.stringify));
                var uniqArray = Array.from(set).map(JSON.parse);
                this.card = uniqArray;
            } catch(e) {
                localStorage.removeItem('cart');
                console.log('Error:', e)
            }
        }
        if (localStorage.getItem('preorder')) {
            try {
                setTimeout(function () {
                    this.loading = false;
                }.bind(this), 500);
                var goods = JSON.parse(localStorage.getItem('preorder'));
                var set = new Set(goods.map(JSON.stringify));
                var uniqArray = Array.from(set).map(JSON.parse);
                this.preorder = uniqArray;
            } catch(e) {
                localStorage.removeItem('preorder');
                console.log('Error:', e)
            }
        }
    },
    methods: {
        onChange: async function () {
            var update = this.address ? 'update' : 'no update'
            await this.$nextTick()
            if(update === 'update') {
                localStorage.setItem('address', this.address)
            }  
        },
        inPreCrement(id) {
            var item = this.preorder.find(item => item.id === id);
            item.count++;
            item.summa = parseFloat(item.summa)*Number(item.count);
            this.savePreOrder();
        },
        dePreCrement(id) {
            var item = this.preorder.find(item => item.id === id);
            item.count--;
            item.summa = parseFloat(item.summa)*Number(item.count);
            this.savePreOrder();            
        },
        inCrement(id) {
            var item = this.card.find(item => item.id === id);
            item.count++;
            item.summa = parseFloat(item.summa)*Number(item.count);
            this.saveCart();
        },
        deCrement(id) {
            var item = this.card.find(item => item.id === id);
            if(item.count = 1) {
                item.count = 1
                item.summa = parseFloat(item.summa)/2;
                //item.price = Number((parseInt(item.price * 100)) / 100)/2;
            } else {
                item.count--;
                item.summa = parseFloat(item.summa)/item.count;                
            }
            this.saveCart();
        },
        priceFormat: function(digital) { // parseFloat()
            var rub = digital.toString().substr(0, String(digital).length-2)
            var cent = digital.toString().substr(-2)
            var num = rub+'.'+cent
            var result = new Intl.NumberFormat("ru-RU", {
                style: "currency",
                currency: "RUB",
                minimumFractionDigits: 2,
                currencyDisplay: "symbol",
            }).format(num);
            // .format(value / 100)
            return result
            //parseInt(digital).toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ")
            //const cent = digital.toString().split('.')[1];
            //return num+'.'+cent+' ₽'
            
        },
        getTotalsumma(digital) {
            var rub = digital.toString().substr(0, String(digital).length-2).replace(/\B(?=(\d{3})+(?!\d))/g, " ");
            var cent = digital.toString().slice(-2);
            return rub+'.'+cent+' ₽';
        },
        getStartLink(url) {
            window.location.assign(url);
        },
        countGoods(n,s1,s2,s3, b = false) {
            let m = n % 10; j = n % 100;
            if(b) {n = n;}
            if(m==0 || m>=5 || (j>=10 && j<=20)) {return s3;}
            if(m>=2 && m<=4) {return s2;}
            return s1;
        },
        toggleSubMenu() {
            if(!this.isOpen) {
                this.isOpen = !this.isOpen;
            }
        },
        toggleMenu() {
            var el = document.getElementsByClassName("show")[0];
            this.isOpen = !this.isOpen;
            if(this.isOpen === false) {
                el.classList.remove('show');
            }
        },
        toggleExpandLess() {
            this.expand = !this.expand;
        },
        addToOrder(e) {
            var added = JSON.parse(localStorage.getItem('preorder'));
            var arr = added ? added : [added];
            const el = document.querySelector('#preorder'+e);
            const {...order} = el.dataset.order.split(',');
            const add = {
                id: order[0],
                article: order[1],
                name: order[2],
                count: order[3],
                price: order[4]
            }
            console.log('to card: ', add);
            var total = arr.filter(el => el != null).concat(add);
            toastr.success(`Товар "${order[2]}" отправлен в предзаказ`, "Успешно", {
                positionClass:"toast-bottom-left",
                containerId:"toast-bottom-left"
            });
            localStorage.setItem('preorder', JSON.stringify(total));
            this.preorder.push(add);
            this.savePreOrder();
        },
        addToCard(e) {
            var added = JSON.parse(localStorage.getItem('cart'));
            var arr = added ? added : [added];
            const el = document.querySelector('#card'+e);
            //var valu = e.target.dataset.card;
            const {...card} = el.dataset.card.split(',');
            const add = {
                id: card[0],
                article: card[1],
                name: card[2],
                count: card[3],
                price: card[4],
                summa: card[5]
            }
            console.log('to card: ', add);
            var total = arr.filter(el => el != null).concat(add);
            toastr.success(`Товар "${card[2]}" добавлен в корзину`, "Успешно", {
                positionClass:"toast-bottom-left",
                containerId:"toast-bottom-left"
            });
            localStorage.setItem('cart', JSON.stringify(total));
            this.card.push(add);
            this.saveCart();
        },
        addCat() {
            if (!this.newCart) {
                return;
            };
            this.card.push(this.newCart);
            this.newCart = '';
            this.saveCart();
        },
        removeCart(x) {
            this.card.splice(x, 1);
            this.saveCart();
        },
        removePreOrder(x) {
            this.preorder.splice(x, 1);
            this.savePreOrder();
        },
        saveCart() {
            const parsed = JSON.stringify(this.card);
            localStorage.setItem('cart', parsed); 
        },
        savePreOrder() {
            const parsed = JSON.stringify(this.preorder);
            localStorage.setItem('preorder', parsed); 
        },
        rootsObjectValues(goods) {
            return Object.values(goods).map((value) => ({
                quantity: Number(value.count),
                price: Number(value.price),
                discount: 0,
                vat: 20,
                assortment: {
                    meta: {
                        href: `https://online.moysklad.ru/api/remap/1.2/entity/product/${value.id}`,
                        type: "product",
                        mediaType: "application/json"
                    }
                },
                reserve: 0
            }));
        },
        async preCheckout(x) {
            toastr.success('Ваш заказ получен.', 'Успешно', {
                positionClass:"toast-bottom-left",
                containerId:"toast-bottom-left"
            });
            const roots = this.rootsObjectValues(this.preorder);
            var name = +new Date();
            var cart = {
                name: '00'+(name).toString().slice(-5),
                description: `${x}`,
                organization: {
                    meta: {
                        href: 'https://online.moysklad.ru/api/remap/1.2/entity/organization/218c26ab-33fe-11ed-0a80-0285001db7b3',
                        type: 'organization',
                        mediaType: 'application/json'
                    }
                },
                agent: {
                    meta: {
                        href: `https://online.moysklad.ru/api/remap/1.2/entity/counterparty/${x}`,
                        type: 'counterparty',
                        mediaType: 'application/json'
                    }
                },
                state: {
                    meta: {
                        href: `https://online.moysklad.ru/api/remap/1.2/entity/internalorder/metadata/states/1c8246e7-8845-11ed-0a80-04de00b11370`,
                        metadataHref: `https://online.moysklad.ru/api/remap/1.2/entity/internalorder/metadata`,
                        type: 'state',
                        mediaType: 'application/json'
                    },
                    id: '1c8246e7-8845-11ed-0a80-04de00b11370',
                    accountId: '213fbb41-33fe-11ed-0a80-08210000b632',
                    name: 'Новый',
                    color: 15106326,
                    stateType: 'Regular',
                    entityType: 'internalorder'
                },
                store: {
                    meta: {
                        href: 'https://online.moysklad.ru/api/remap/1.2/entity/store/218d258b-33fe-11ed-0a80-0285001db7b5',
                        metadataHref: 'https://online.moysklad.ru/api/remap/1.2/entity/store/metadata',
                        type: 'store',
                        mediaType: 'application/json'
                    }
                }
            };
            var positions = {
                positions: roots
            };

            this.preсheckout = Object.assign({}, cart, positions);
            setTimeout(function () {
                localStorage.removeItem('preorder');
            }.bind(this), 1000);
        },
        async Checkout(x) {
            toastr.success('Ваш заказ получен.', 'Успешно', {
                positionClass:"toast-bottom-left",
                containerId:"toast-bottom-left"
            });
            const roots = rootsObjectValues(this.card);
            var cart = {
                organization: {
                    meta: {
                        href: 'https://online.moysklad.ru/api/remap/1.2/entity/organization/218c26ab-33fe-11ed-0a80-0285001db7b3',
                        type: 'organization',
                        mediaType: 'application/json'
                    }
                },
                agent: {
                    meta: {
                        href: `https://online.moysklad.ru/api/remap/1.2/entity/counterparty/${x}`,
                        type: 'counterparty',
                        mediaType: 'application/json'
                    }
                },
            };
            var positions = {
                positions: roots
            };

            this.сheckout = Object.assign({}, cart, positions);
            setTimeout(function () {
                localStorage.removeItem('cart');
            }.bind(this), 1000);
        },
        Send() {
            if(this.isValid) {
                setTimeout(function () {
                    this.loading = true
                }.bind(this), 2000);
            }
            if(!this.vin) {
                this.error.vin = true
            }
            if(!this.spares) {
                this.error.spares = true
            }
        },
        Sender() {
            if(this.isValidMessage) {
                setTimeout(function () {
                    this.loading = true
                }.bind(this), 2000);
            }
            if(!this.message) {
                this.error.message = true
            }
        },
        async SendManager(reports)
        {
            var ModalEl = document.getElementById('manager');
            var modal = bootstrap.Modal.getInstance(ModalEl)
            if(!this.isValidMessage) return false;
            this.loading = true;
            var formdata = new FormData();
            formdata.append('reports', reports);
            formdata.append('message', this.message);

            setTimeout(function () {
                modal.hide();
                toastr.success('Ваша заявка принята.', 'Успешно', {
                    positionClass:"toast-bottom-left",
                    containerId:"toast-bottom-left"
                });
            }.bind(this), 1000);

            this.send = true

            var requestOptions = {
                method: 'POST',
                body: formdata,
                redirect: 'follow'
            };

            const response = await fetch('/api/manager', requestOptions)
                .finally(() => this.loading = false);
            const result = await response.text();
            return result;
        },
        async Save()
        {
            if (!this.isValid) return false;
            this.loading = true;
            var formdata = new FormData();
            var ModalEl = document.getElementById('vinModal');
            var modal = bootstrap.Modal.getInstance(ModalEl)

            formdata.append("vin", this.vin);
            formdata.append("spares", this.spares);
            //var raw = JSON.parse(JSON.stringify(formdata));
            
            setTimeout(function () {
                modal.hide();
                toastr.success(`Ваша заявка принята.`, "Успешно", {
                    positionClass:"toast-bottom-left",
                    containerId:"toast-bottom-left"
                });
            }.bind(this), 1000);
            this.send = true


            var requestOptions = {
                method: 'POST',
                body: formdata,
                redirect: 'follow'
            };

            const response = await fetch('/api/spares', requestOptions)
                .finally(() => this.loading = false);
            const result = await response.text();
            return result;
        }
    }
});

$(function(){
	$('#inner-content').slimScroll({
		height: '570px',
        size: '3px',
        alwaysVisible: false
	});
});

function getStartLink(url) {
    window.location.assign(url);
}