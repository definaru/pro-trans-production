new Vue({
    el: '#auth',
    data: {
        url: document.location.host,
        inn: '',
        loading: false,
        result: [],
        data: [],
        email: '',
        phone: '',
        mail: '',
        login: '',
        uuid: '',
        moysklad: [],
        user: [],
        loginButton: 'Войти'
    },
    mounted() {
        this.result = JSON.parse(localStorage.getItem("signup")) || [];
        this.login = JSON.parse(localStorage.getItem("login")) || [];
        this.user = JSON.parse(localStorage.getItem("user")) || [];
        this.uuid = localStorage.getItem("uuid") || '';
        this.email = this.user.email ?? ''
        this.phone = this.user.phone ?? ''

        var image = document.getElementById('logotype');
        
        if(this.login === '') {
            image.classList.add('d-none');
        }
        this.getDataCompany();
    },
    computed: {
        isValid () {
            return this.inn
        }
    },
    methods: {
        addMaskPhone() {
            new Cleave('.input-phone', {
                prefix: '+7',
                phone: true,
                phoneRegionCode: 'RU'
            });
        },
        Login() {
            localStorage.removeItem('login');
        },
        aStepBack()
        {
            localStorage.clear();
        },
        onChange: async function () {
            var update = this.inn ? 'update' : 'no update'
            await this.$nextTick()
            if(update === 'update') {
                this.save()
            }  
        },
        onChangeContact: async function () {
            var email = this.email ? true : false
            var phone = this.phone ? true : false
            await this.$nextTick()
            if(email || phone) {
                this.Authorisation()
            }  
        },
        cookieStart(e)
        {
            var value = e.target.value;
            var date = new Date;
            date.setDate(date.getDate() + 60);
            return document.cookie = "email="+value+"; path=/; expires=" + date.toUTCString();
        },
        messageStatusCompany() {
            
            if(this.result) {
                if(this.result.data.state.status == 'LIQUIDATED') {
                    Swal.fire({
                        title: 'Ошибка!',
                        text: 'Ваша компания ликвидирована, мы не можем заключить с вами сделку. Обратитесь пожалуйста к нашему менеджеру для дальнейших инструкций.',
                        icon: 'error',
                        confirmButtonText: 'Закрыть'
                    })
                } else {
                    if(this.user.email == null) {
                        Swal.fire({
                            title: `<small>Здравствуйте ${'' && `, `+this.result.data.management.name}</small>`,
                            html: `Ваша компания: ${this.result.data.name.short_with_opf}.<br /> Информация указана верно ?`,
                            icon: 'success',
                            showCancelButton: true,
                            confirmButtonText: 'Да',
                            cancelButtonText: 'Нет',
                            confirmButtonColor: '#198754',
                            cancelButtonColor: '#222'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                this.Authorisation()
                            } else {
                                this.Cancel()
                                this.ToastAlert()
                            }
                        });                
                    }
                }                
            }
        },
        ToastAlert() {
            toastr.error('Пожалуйста, укажите правильный ИНН', 'Ошибка', {
                positionClass:"toast-bottom-left",
                containerId:"toast-bottom-left"
            });
        },
        Cancel(){
            this.inn = '';
            this.loading = false;
            this.result = '';
        },
        async Authorisation() {
            var arr = {email: this.email, phone: this.phone}
            var res = Object.assign({}, arr);
            // window.location.assign('/signup');
            localStorage.setItem('user', JSON.stringify(res));
        },
        async save() {
            if (!this.isValid) return false;
            this.loading = true;
            this.postData()
            var uuid = ([1e7]+1e3+8e3+1e11).replace(/[018]/g,
                c=>(c^crypto.getRandomValues(new Uint8Array(1))[0]&15 >> c/4).toString(16));
            this.data = {
                name: uuid,
                inn: this.inn,
                date: +new Date
            }     
            localStorage.setItem('user', JSON.stringify(this.data))      
        },
        async addCompany(uuid) {

            var headers = new Headers();
            headers.append('Cookie', document.cookie);

            if(this.result) {
                const {kpp, name, inn, ogrn, management, okved, address, ogrn_date, type} = this.result.data
                var ceo = type === 'INDIVIDUAL' ? name?.full : management?.name
                var formdata = new FormData();
                formdata.append('uuid', uuid);
                formdata.append('superintendant', ceo ?? '');
                formdata.append('company', name.short_with_opf);
                formdata.append('okved', okved);
                formdata.append('inn', inn);
                formdata.append('ogrn', ogrn);
                formdata.append('kpp', kpp ?? '-');
                formdata.append('address', address.unrestricted_value);
                formdata.append('ogrn_date', ogrn_date.toString().slice(0, -3));

                var requestOptions = {
                    method: 'POST',
                    headers,
                    body: formdata,
                    redirect: 'follow'
                };

                await fetch(`/api/customer`, requestOptions)
                    .then(response => response.text())
                    .then(result => console.log(result))
                    .catch(error => console.log('error', error));                
            }
        },
        async addUser(uuid) {

            const {management, name, type} = this.result?.data
            const {email} = this.user
            var ceo = type === 'INDIVIDUAL' ? name?.full : management?.name
            var headers = new Headers();
            headers.append('Cookie', document.cookie);

            if(this.result) {
                var formdata = new FormData();
                formdata.append('name', ceo ?? '');
                formdata.append('email', email);
                formdata.append('verified', uuid);
                formdata.append('password', uuid);
                
                var options = {
                    method: 'POST',
                    headers,
                    body: formdata,
                    redirect: 'follow'
                };
                
                await fetch(`/api/signup`, options)
                    .then(response => response.text())
                    .then(result => console.log(result))
                    .catch(error => console.log('error', error));
                    
                this.sendMail(email);                
            }
        },
        async sendMail(mail) {
            var headers = new Headers();
            headers.append("Cookie", document.cookie);
            
            var formdata = new FormData();
            formdata.append("email", mail);
            
            var options = {
                method: 'POST',
                headers,
                body: formdata,
                redirect: 'follow'
            };
            
            const res = await fetch('/api/mail', options);
            const data = await res.json();
            //console.log('send Mail:', data);
        },
        async postData() {
            var url = "https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party";
            var token = "3e6ac5399230fe9e2e7d6ae0fc7e72dd86c0d9ef";
            var query = this.inn;

            var options = {
                method: "POST",
                mode: "cors",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "Authorization": "Token " + token
                },
                body: JSON.stringify({query: query})
            }
            this.loading = true;
            const res = await fetch(url, options);
            const data = await res.json();
            this.result = data.suggestions[0]
            this.loading = false;

            // await this.$nextTick()
            this.messageStatusCompany()

            setTimeout( function() {
                localStorage.setItem('signup', JSON.stringify(this.result)) 
                localStorage.setItem('login', 'true')
            }.bind(this), 500)
        }, 
        async getDataCompany()
        {
            console.log('moysklad', this.result);
            if(this.result && this.user) {
                const {kpp, name, inn, ogrn, okpo, address, fio} = this.result?.data ?? {}
                const {email, phone} = this.user
                if(this.result?.data.type === 'INDIVIDUAL') {
                    this.moysklad = {
                        name: this.result?.value,
                        email: email,
                        phone: phone,
                        companyType: 'entrepreneur',
                        legalLastName: fio?.surname,
                        legalFirstName: fio?.name,
                        legalMiddleName: fio?.patronymic,
                        actualAddress: address?.unrestricted_value,
                        legalAddress: address?.unrestricted_value,
                        inn: inn,
                        ogrnip: ogrn,
                        okpo: okpo
                    }
                } else {
                    this.moysklad = {
                        name: name?.short_with_opf,
                        email: email,
                        phone: phone,
                        actualAddress: address?.unrestricted_value,
                        legalTitle: name?.full_with_opf,
                        legalAddress: address?.unrestricted_value,
                        inn: inn,
                        kpp: kpp,
                        ogrn: ogrn,
                        okpo: okpo
                    }                        
                }

            }

            var uuid = document.getElementById('account')?.innerHTML
            if(uuid) {
                uuid = uuid.toString().trim()
                localStorage.setItem('uuid', uuid)
                this.addCompany(uuid)
                this.addUser(uuid)                
            }
        }
    }
});


var currentemail = document.cookie.split('; ').find((row) => row.startsWith('email='))?.split('=')[1];
var inputemail = document.querySelector('input[name="email"]');

if(inputemail) {
    inputemail.value = currentemail ?? '';
}

const load = document.getElementById('loading');
//var loadText = load.innerText;
if(load !== null) {
    load.addEventListener('click', (e) => {
        setTimeout( function() {
            load.innerHTML;
            //console.log('Data:', e);
        }.bind(this), 3000);
        load.innerHTML = 'Загрузка...';
    });    
}

let elements = document.querySelectorAll('.material-symbols-outlined');

document.addEventListener("DOMContentLoaded", () => {
    for (let none of elements) {
        none.classList.remove("d-none");
    }
});

function store() {
    let openRequest = indexedDB.open('prospekt_parts', 2);
    openRequest.onupgradeneeded = function() {
        let db = openRequest.result;
        if (!db.objectStoreNames.contains('user')) {
            db.createObjectStore('user', {keyPath: 'value'});
            //alert("Your App data has been saved");
        }        
    };
}
store();

(async function added() 
    {
        var request = indexedDB.open("prospekt_parts", 2);
        request.onsuccess = function(event) {
            var db = event.target.result;
            let transaction = db.transaction("user", "readwrite");
            let data = JSON.parse(localStorage.getItem("signup")) || [];
            //console.log("data:", data);   
            let requests = transaction.objectStore('user').add(data);  
            requests.onerror = function(event) {
                if (requests.error.name == "ConstraintError") {
                    console.log("Ошибка: Такая запиись уже есть");
                    event.preventDefault(); // предотвращаем отмену транзакции
                } else {
                    console.log("Ошибка", requests.error);
                }
            };

            transaction.onabort = function() {
                console.log("Ошибка", transaction.error);
            };                
        };
    }
)();