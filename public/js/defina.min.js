new Vue({
    el: '#auth',
    data: {
        url: document.location.host,
        inn: '',
        loading: false,
        result: [],
        data: [],
        email: '',
        mail: '',
        login: '',
        loginButton: 'Войти'
    },
    mounted() {
        this.result = JSON.parse(localStorage.getItem("signup")) || [];
        this.login = JSON.parse(localStorage.getItem("login")) || [];
        this.email = JSON.parse(localStorage.getItem("user")) || [];
        var image = document.getElementById('logotype');

        if(this.login === '') {
            image.classList.add('d-none');
        }
    },
    computed: {
        isValid () {
            return this.inn
        }
    },
    methods: {
        Login() {
            localStorage.removeItem('login');
        },
        onChange: async function () {
            var update = this.inn ? 'update' : 'no update'
            await this.$nextTick()
            if(update === 'update') {
                this.save()
            }  
        },
        cookieStart(e)
        {
            var value = e.target.value;
            var date = new Date;
            date.setDate(date.getDate() + 60);
            return document.cookie = "email="+value+"; path=/; expires=" + date.toUTCString();
        },
        messageStatusCompany() {
            console.log('INN:', this.result);
            if(this.result) {
                if(this.result.data.state.status == 'LIQUIDATED') {
                    Swal.fire({
                        title: 'Ошибка!',
                        text: 'Ваша компания ликвидирована, мы не можем заключить с вами сделку. Обратитесь пожалуйста к нашему менеджеру для дальнейших инструкций.',
                        icon: 'error',
                        confirmButtonText: 'Закрыть'
                    })
                } else {
                    if(this.email.email == null) {
                        Swal.fire({
                            title: `<small>Здравствуйте ${'' && `, `+this.result.data.management.name}</small>`,
                            html: `Ваша компания: ${this.result.data.name.short_with_opf}.<br /> Информация указана верно ?`,
                            icon: 'success',
                            showCancelButton: true,
                            confirmButtonText: 'Да',
                            cancelButtonText: 'Нет',
                            confirmButtonColor: '#198754',
                            cancelButtonColor: '#222'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                this.Authorisation()
                            } else {
                                this.Cancel()
                                this.ToastAlert()
                            }
                        });                
                    }
                }                
            }
        },
        ToastAlert() {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3500,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })
            Toast.fire({
                icon: 'info',
                title: 'Пожалуйста, укажите правильный ИНН'
            })
        },
        Cancel(){
            this.inn = '';
            this.loading = false;
            this.result = '';
        },
        async Authorisation() {
            const EMAIL_REGEXP = /^((([0-9A-Za-z]{1}[-0-9A-z\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\.]{1,}[0-9А-Яа-я]{1}))@([-0-9A-Za-z]{1,}\.){1,2}[-A-Za-z]{2,})$/u;
            const { value: email } = await Swal.fire({
                title: 'Введите e-mail',
                input: 'email',
                inputLabel: 'Укажите здесь вашу корпоративную почту',
                inputPlaceholder: 'E-mail адрес для регистрации',
                confirmButtonText: '<span class="material-symbols-outlined">check</span> Подтвердить',
                confirmButtonColor: '#198754',
                customClass: {
                    confirmButton: 'd-flex gap-2'
                },
                // inputValidator: (value) => {
                //     return new Promise((resolve) => {
                //         if (!value) {
                //             resolve('Вы не написали Ваш e-mail') 
                //         } else if (EMAIL_REGEXP.test(value)) {
                //             resolve('Введёные данные не являются электронной почтой!') 
                //         } else {
                //             resolve()
                //         }                        
                //     })
                // }
            })
            if (email) {
                var items = JSON.parse(localStorage.getItem('user'))
                var arr = {email: email}
                
                var res = Object.assign(arr, items);
                this.addUser(this.result, res);
                this.addCompany(this.result, res);
                localStorage.setItem('user', JSON.stringify(res));

                Swal.fire({
                    title: 'Регистрация завершена', 
                    html: `<p class="text-muted">На ваш email: <strong>${email}</strong><br/> 
                    была отправлена важная информация.<br/> 
                    Пожалуйста, ознакомьтесь.</p>`, 
                    icon: '',
                    showConfirmButton: false
                })
            }
        },
        async save() {
            if (!this.isValid) return false;
            this.loading = true;
            this.postData()
            var uuid = ([1e7]+1e3+8e3+1e11).replace(/[018]/g,
                c=>(c^crypto.getRandomValues(new Uint8Array(1))[0]&15 >> c/4).toString(16));
            this.data = {
                name: uuid,
                inn: this.inn,
                date: +new Date
            }     
            localStorage.setItem('user', JSON.stringify(this.data))      
        },
        async addCompany(data, company) {
            var headers = new Headers();
            headers.append("Cookie", document.cookie);

            var formdata = new FormData();
            formdata.append("uuid", company.name);
            formdata.append("superintendant", data.data.management?.name ?? '');
            formdata.append("company", data.value);
            formdata.append("okved", data.data.okved);
            formdata.append("inn", data.data.inn);
            formdata.append("ogrn", data.data.ogrn);
            formdata.append("kpp", data.data.kpp);
            formdata.append("address", data.data.address.unrestricted_value);
            formdata.append("ogrn_date", data.data.ogrn_date.toString().slice(0, -3));

            var requestOptions = {
                method: 'POST',
                headers,
                body: formdata,
                redirect: 'follow'
            };

            await fetch(`/api/customer`, requestOptions)
                .then(response => response.text())
                .then(result => console.log(result))
                .catch(error => console.log('error', error));
        },
        async addUser(data, mail) {
            const {email, name} = mail
            var headers = new Headers();
            headers.append("Cookie", document.cookie);
            
            var formdata = new FormData();
            formdata.append("name", data.data.management?.name ?? '');
            formdata.append("email", email);
            formdata.append("verified", name);
            formdata.append("password", name);
            
            var options = {
                method: 'POST',
                headers,
                body: formdata,
                redirect: 'follow'
            };
            
            await fetch(`/api/signup`, options)
                .then(response => response.text())
                .then(result => console.log(result))
                .catch(error => console.log('error', error));
                
            this.sendMail(email);
        },
        async sendMail(mail) {
            var headers = new Headers();
            headers.append("Cookie", document.cookie);
            
            var formdata = new FormData();
            formdata.append("email", mail);
            
            var options = {
                method: 'POST',
                headers,
                body: formdata,
                redirect: 'follow'
            };
            
            const res = await fetch('/api/mail', options);
            const data = await res.json();
        },
        async postData() {
            var url = "https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party";
            var token = "3e6ac5399230fe9e2e7d6ae0fc7e72dd86c0d9ef";
            var query = this.inn;

            var options = {
                method: "POST",
                mode: "cors",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "Authorization": "Token " + token
                },
                body: JSON.stringify({query: query})
            }
            this.loading = true;
            const res = await fetch(url, options);
            const data = await res.json();
            this.result = data.suggestions[0]
            this.loading = false;

            // await this.$nextTick()
            this.messageStatusCompany()

            setTimeout( function() {
                localStorage.setItem('signup', JSON.stringify(this.result)) 
                localStorage.setItem('login', 'true')
            }.bind(this), 500)
        }
    }
});

const load = document.getElementById('loading');
//var loadText = load.innerText;
if(load !== null) {
    load.addEventListener('click', (e) => {
        setTimeout( function() {
            load.innerHTML;
            //console.log('Data:', e);
        }.bind(this), 3000);
        load.innerHTML = 'Загрузка...';
    });    
}